---
layout: post
title:  "REST"
date:   2021-11-17 16:00:00 +0900
category: CS
---
# REST

## REST란?

- 분산 하이퍼미디어 시스템 설계를 위한 소프트웨어 아키텍처의 한 형식
- HTTP URI를 통해 자원을 명시하고, HTTP Method를 통해 자원에 대한
  CRUD Operation을 적용하는 것

## REST의 장단점

- 장점
  * HTTP 프로토콜의 인프라를 그래도 사용하므로 REST API 사용을 위한 별도의
  인프라를 구축할 필요가 없다
  * HTTP 프로토콜의 표준을 최대한 활용하여 여러 추가적인 장점을 함께 가져갈 수 있게 해준다
  * HTTP 표준 프로토콜에 따르는 모든 플랫폼에서 사용이 가능
  * Hypermedia API의 기본을 충실히 지키면서 범용성을 보장
  * REST API 메시지가 의도하는 바를 명확하게 나타내므로 의도하는 바를 쉽게 파악 가능
  * 여러가지 서비스 디자인에서 생길 수 있는 문제를 최소화
  * 서버와 클라이언트의 역할을 명확하게 분리
- 단점
  * 표준이 존재하지 않는다
  * 사용할 수 있는 메소드가 4가지 밖에 없다
  * HTTP Method 형태가 제한적
  * 구형 브라우저가 아직 제대로 지원해주지 못하는 부분이 존재
  
## REST 구성 요소

- 자원 : URL
  * 모든 자원에 고유한 ID가 존재하고, 이 자원은 Server에 존재
  * 자원을 구별하는 ID는 HTTP URI
  Client는 URI를 이용해서 자원을 지정하고 해당 자원의 상태에 대한 조작을 Server에 요청
- 행위 : HTTP Method
  * HTTP 프로토콜의 Method를 사용
  * HTTP 프로토콜은 GET, POST, PUT, DELETE와 같은 메서드를 제공
- 표현
  * Client가 자원의 상태에 대한 조작을 요청하면 Server는 이에 적절한 응답을 보낸다
  * REST에서 하나의 자원은 JSON, XML, TEXT, RSS등 여러 형태의 Representation으로 나타내어 질 수 있다
  * JSON 혹은 XML을 통해 데이터를 주고 받는 것이 일반적
  
## REST 아키텍처에 적용되는 6가지 제한 조건

- 인터페이스 일관성 : 일관적인 인터페이스로 분리되어야 한다
- 무상태 : 각 요청 간 클라이언트의 콘텍스트가 서버에 저장되어서는 안 된다
- 캐시 처리 가능 : WWW에서와 같이 클라이언트는 응답을 캐싱할 수 있어야 한다
- 계층화 : 클라이언트는 보통 대상 서버에 직접 연결되었는지, 또는 중간 서버를 통해
  연결되었는지를 알 수 없다. 중간 서버는 로드 밸런싱 기능이나 공유 캐시 기능을
  제공함으로써 시스템 규모 확장성을 향상시키는 데 유용
- Code on demand : 자바 애플릿이나 자바스크립트의 제공을 통해 서버가 클라이언트가
  실행시킬 수 있는 로직을 전송하여 기능을 확장시킬 수 있다
- 클라이언트/서버 구조 : 아키텍처를 단순화시키고 작은 단위로 분리함으로써 클라이언트-서버의
  각 파트가 독립적으로 개선될 수 있도록 해준다
  
## REST API란?

- API
  * 데이터와 기능의 집합을 제공하여 컴퓨터 프로그램간 상호작용을 촉진하며, 서로 정보를
  교환 가능 하도록 하는 것
- REST API의 정의
 * REST 기반으로 서비스 API를 구현한 것
 * 최근 OpenAPI, 마이크로 서비스 등을 제공하는 업체 대부분은 REST API를 제공

## REST API의 특징

- 사내 시스템들도 REST 기반으로 시스템을 분산해 확장성과 재사용성을 높여 유지보수 및 운용을
  편리하게 할 수 있다
- REST는 HTTP 표준을 기반으로 구현하므로, HTTP를 지원하는 프로그램 언어로
  클라이언트, 서버를 구현할 수 있다
- REST API를 제작하면 델파이 클라이언트 뿐 아니라, 자바, C#, 웹 등을 이용해 클라이언트를 제작할 수 있다

## REST API 설계 기본 규칙

- URI는 정보의 자원을 표현해야 한다
  * resource는 동사보다는 명사를, 대문자보다는 소문자를 사용
  * resource의 document 이름으로는 단수 명사를 사용
  * resource의 컬렉션 이름으로는 복수 명사를 사용
  * resource의 스토어 이름으로는 복수 명사를 사용
- 자원에 대한 행위는 HTTP Method로 표현
  * URI에 HTTP Method가 들어가면 안된다
  * URI에 행위에 대한 동사 표현이 들어가면 안된다
  * 경로 부분 중 변하는 부분은 유일한 값으로 대체
  
## REST API 설계 규칙

- 슬래시 구분자는 계층 관계를 나타내는데 사용
- URI 마지막 문자로 슬래시를 포함하지 않는다
- 하이픈은 URI 가독성을 높이는데 사용
- 밑줄은 URI에 사용하지 않는다
- URI 경로에는 소문자가 적합
- 파일확장자는 URI에 포함하지 않는다
- 리소스 간에는 연관 관계가 있는 경우
  * /리소스명/리소스ID/관계가 있는 다른 리소스명
  
## RESTful이란?

RESTful은 일반적으로 REST라는 아키텍처를 구현하는 웹 서비스를 나타내기 위해 사용되는 용어

## RESTful의 목적

- 이해하기 쉽고 사용하기 쉬운 REST API를 만드는 것
- RESTful한 API를 구현하는 근본적인 목적이 성능 향상에 있는 것이 아니라 일관적인 컨벤션을 통한
  API의 이해도 및 호환성을 높이는 것이 주 동기이니, 성능이 중요한 상황에서는 굳이 RESTful한
  API를 구현할 필요는 없다

### [참고]
<https://ko.wikipedia.org/wiki/REST> <br>
<https://gmlwjd9405.github.io/2018/09/21/rest-and-restful.html>