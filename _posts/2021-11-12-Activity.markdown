---
layout: post
title: "Activity"
date: 2021-11-12 18:00:00 +0900
category: Android
---

# Actvity

## 1. Activity란?

- Android 앱의 중요한 구성요소로 사용자에게 UI가 있는 화면을 제공하는 앱 컴포넌트
- 사용자가 앱과 상호작용하기 위한 진입점 역할
- 사용자가 앱 내에서 탐색하거나 앱 간에 이동하는 방법의 중심
- 앱이 UI를 그리는 창을 제공
- 대부분의 앱은 여러 <span style="color:orange">**Activity**</span>로 구성
- 일반적으로 하나의 <span style="color:orange">**Activity**</span>가 기본 <span style="color:orange">**Activity**</span>로 지정되며
  이 기본 <span style="color:orange">**Activity**</span>는 사용자가 앱을 실행할 때 표시되는 첫 번째 화면
- <span style="color:orange">**Activity**</span>가 앱의 일관된 사용자 환경을 형성하기 위해 함께 작동하지만
  각 <span style="color:orange">**Activity**</span>는 다른 <span style="color:orange">**Activity**</span>에 단지 느슨하게 결합
- 일반적으로 앱의 <span style="color:orange">**Activity**</span> 간에는 최소한의 종속성만 있다

## 2. Activity Lifecycle

사용자가 앱을 탐색하고, 앱에서 나가고, 앱으로 다시 돌아가면 앱의 <span style="color:orange">**Activity**</span>
인스턴스는 수명 주기 안에서 서로 다른 상태를 통해 전환됩니다.

<img src="http://snowchori.github.io/assets/img/activity_lifecycle.png">

### onCreate()

- 시스템이 먼저 <span style="color:orange">**Activity**</span>를 생성할 때 실행되는 것
- <span style="color:orange">**Activity**</span>가 생성되면 _Created_ 상태가 된다
- <span style="color:orange">**Activity**</span>의 전체 수명 주기 동안 한 번만 발생해야 하는 기본 애플리케이션 시작 로직을 실행
- <span style="color:blue">**onCreate()**</span>를 구현하면 가능한 것
  * 데이터를 목록에 바인딩
  * <span style="color:orange">**Activity**</span>를 <span style="color:blue">**VeiwModel**</span>과 연결
  * 일부 클래스 범위 변수 인스턴스화
- 이 메서드는 <span style="color:orange">**Activity**</span>의 이전 저장 상태가 포함된
  <span style="color:blue">**Bundle**</span> 객체인 <span style="color:gray">savedInstanceState</span> 매개변수를 수신
- 처음 생성된 <span style="color:orange">**Activity**</span>인 경우
  <span style="color:blue">**Bundle**</span> 객체의 값은 null
- <span style="color:blue">**onCreate()**</span> 메서드가 실행을 완료하면 _Started_ 상태가 되고,
  <span style="color:blue">**onStart()**</span>와
  <span style="color:blue">**onResume()**</span> 메서드를 호출

### onStart()

- <span style="color:orange">**Activity**</span>가 _Started_ 샅태에 들어가면 시스템은 이 콜백을 호출
- <span style="color:blue">**onStart()**</span>가 호출되면 <span style="color:orange">**Activity**</span>가 
  사용자에게 표시되고, 앱은 <span style="color:orange">**Activity**</span>를 포그라운드에
  보내 상호작용할 수 있도록 준비
- 이 메서드에서 앱이 UI를 관리하는 코드를 초기화
- <span style="color:blue">**onStart()**</span> 메서드는 매우 빠르게 완료
- 이 콜백이 완료되면 <span style="color:orange">**Activity**</span>가 _Resumed_ 상태에 들어가고, 
  시스템이 <span style="color:blue">**onResume()**</span> 메서드를 호출
  
### onResume()

- <span style="color:orange">**Activity**</span>가 _Resumed_ 상태가 되면 
  포그라운드로 이동한 다음 시스템이 <span style="color:blue">**onResume()**</span>
  콜백을 호출
- 앱이 사용자와 상호 작용하는 상태
- 앱은 앱에서 포커스를 잃는 일이 발생할 때까지 이 상태를 유지
- 중단 이벤트가 발생하면 <span style="color:orange">**Activity**</span>가 
  _Paused_ 상태가 되고 시스템이 <span style="color:blue">**onPause()**</span> 콜백을 호출
- <span style="color:orange">**Activity**</span>가 _Paused_ 상태에서 _Resumed_ 상태로
  돌아오면 시스템은 다시 한 번 <span style="color:blue">**onResume()**</span> 메서드를 호출
- <span style="color:blue">**onPause()**</span> 동안 릴리스하는 구성 요소를 초기화하도록 구현하고
  <span style="color:orange">**Activity**</span>가 _Resumed_ 상태에 들어갈 때마다 발생해야하는
  다른 초기화를 수행해야 한다

### onPaused()

- 시스템은 사용자가 <span style="color:orange">**Activity**</span>를
  떠나는 첫 번째 표시로 이 메서드를 호출
- <span style="color:orange">**Activity**</span>가 더 이상 전경에 있지 않음을 나타냄
- <span style="color:blue">**onPause()**</span> 메서드를 사용하여
  <span style="color:orange">**Activity**</span>가 _Paused_ 상태에 있는 동안 계속해서는
  안 되는 작업을 일시 중지하거나 조정하고 곧 재개할 것으로 예상
- <span style="color:orange">**Activity**</span>가 이 상태에 들어갈 수 있는 경우
  * 시스템이 <span style="color:blue">**onResume()**</span>에서 중단 이벤트가 발생한 경우
    (가장 일반적인 경우)
  * 여러 앱이 다중 창 모드에서 실행될 때 포커스가 있는 하나의 앱 이외의 다른 모든 앱은 _Paused_ 상태
  * 새로운 반투명 <span style="color:orange">**Activity**</span>가 열릴 때
    <span style="color:orange">**Activity**</span>가 여전히 부분적으로 표시되지만
    포커스가 맞지 않는 한 _Paused_ 상태 유지
- 시스템 리소스, 센서 핸들 또는 <span style="color:orange">**Activity**</span>가 _Paused_ 상태가 되고
  사용자에게 필요하지 않은 동안 배터리 수명에 영향을 줄 수 있는 모든 리소스 해제 가능
- _Paused_ 상태의 <span style="color:orange">**Activity**</span>는 다중 창 모드에 있는 경우
  여전히 완전히 표시될 수 있기 때문에 UI 관련 리소스 및 작업을 완전히 해제하거나 조정하려면
  <span style="color:blue">**onPause()**</span> 대신
  <span style="color:blue">**onStop()**</span>을 사용하는 것을 고려
- <span style="color:blue">**onPause()**</span> 실행은 매우 짧고 저장 작업을 수행하는 데
  충분한 시간이 필요하지 않음
- <span style="color:orange">**Activity**</span>가 재개되거나 사용자에게 완전히 보이지 않을 때까지
  <span style="color:orange">**Activity**</span>는 이 상태로 유지
- <span style="color:orange">**Activity**</span>가 재개되면 시스템은 다시 한 번
  <span style="color:blue">**onResume()**</span> 콜백을 호출
- <span style="color:orange">**Activity**</span>가 _Paused_ 상태에서 _Resumed_ 상태로 돌아오면
  시스템은 <span style="color:orange">**Activity**</span> 인스턴스를 메모리에 유지하여 시스템이
  <span style="color:blue">**onResume()**</span>을 호출할 때 해당 인스턴스를 호출
- <span style="color:orange">**Activity**</span>가 완전히 보이지 않으면 시스템이
  <span style="color:blue">**onStop()**</span>을 호출
  
### onStop()

- <span style="color:orange">**Activity**</span>가 사용자에게 더 이상 표시되지 않으면
  _Stopped_ 상태가 되고 시스템이 <span style="color:blue">**onStop()**</span> 콜백을 호출
- 시스템은 <span style="color:orange">**Activity**</span> 실행이 완료되고 종료되려고 할 때
  <span style="color:blue">**onStop()**</span>을 호출 할 수도 있다
- <span style="color:blue">**onStop()**</span> 메서드에서 응용 프로그램은 해제하거나
  앱이 사용자가 볼 수 없는동안 필요하지 않은 자원을 조정해야한다
- <span style="color:blue">**onPause()**</span> 대신
  <span style="color:blue">**onStop()**</span>을 사용하면 사용자가 다중 창 모드에서
  <span style="color:orange">**Activity**</span>를 보고있는 경우에도 UI 관련 작업이 계속 된다
- 상대적으로 CPU를 많이 사용하는 종료 작업을 수행하는데 사용
- <span style="color:orange">**Activity**</span>가 _Stopped_ 상태가 되면
  <span style="color:orange">**Activity**</span> 개체가 메모리에 상주
- 모든 상태 및 구성원 정보를 유지하지만 창 관리자에 연결되지는 않는다
- <span style="color:orange">**Activity**</span>가 재개되면
  <span style="color:orange">**Activity**</span>는 이 정보를 회수
- _Resumed_ 상태로 이어지는 콜백 메서드 중 생성된 구성 요소를 다시 초기화할 필요 없다
- _Stopped_ 상태에서 <span style="color:orange">**Activity**</span>는 사용자와
  상호 작용하기 위해 다시 돌아오거나 <span style="color:orange">**Activity**</span>
  실행이 완료되고 사라진다
- <span style="color:orange">**Activity**</span>가 다시 시작되면 시스템이
  <span style="color:blue">**onRestart()**</span>를 호출
- <span style="color:orange">**Activity**</span>가 실행이 완료되면 시스템은
  <span style="color:blue">**onDestroy()**</span>를 호출
  
### onRestart()

- _Stopped_ 상태의 <span style="color:orange">**Activity**</span>가 다시 시작되려고 할 때
  시스템은 이 콜백을 호출
- <span style="color:blue">**onRestart()**</span>는
  <span style="color:orange">**Activity**</span>가 중지된 시간부터
  <span style="color:orange">**Activity**</span> 상태를 복원
- 이 콜백 뒤에 항상 <span style="color:blue">**onStart()**</span> 호출

### onDestroy()

- <span style="color:orange">**Activity**</span>가 소멸되기 전에 호출
- 시스템이 <span style="color:blue">**onDestroy()**</span>를 호출하는 경우
  * <span style="color:orange">**Activity**</span>가 사용자가
    <span style="color:orange">**Activity**</span>를 완전히 닫았거나
    <span style="color:orange">**Activity**</span>에 대한 호출로 인해
    종료 중일 때
  * 시스템이 구성 변경으로 인해 <span style="color:orange">**Activity**</span>을
    일시적으로 파괴할 때
- <span style="color:orange">**Activity**</span>에 로직을 넣어 왜 파괴되는지 
  결정하는 대신 <span style="color:orange">**Activity**</span>에 대한 관련 보기 데이터를 포함하는
  <span style="color:blue">**ViewModel**</span> 개체를 사용해야 한다
- 구성 변경으로 인해 <span style="color:orange">**Activity**</span>가 다시 생성될 경우
  <span style="color:blue">**ViewModel**</span>은 보존되고 다음
  <span style="color:orange">**Activity**</span> 인스턴스에 제공되므로
  아무 작업도 수행할 필요가 없다
- <span style="color:orange">**Activity**</span>가 다시 생성되지 않을 경우
  <span style="color:blue">**ViewModel**</span>은 소멸되기 전에 필요한 데이터를 정리할 수 있는
  <span style="color:blue">**onCleared()**</span> 메서드를 호출
- <span style="color:orange">**Activity**</span>가 완료되면
  <span style="color:blue">**onDestroy()**</span>는
  <span style="color:orange">**Activity**</span>가 수신하는 최종 수명 주기 콜백
- 구성 변경의 결과로 <span style="color:blue">**onDestroy()**</span>가 호출되면
  시스템은 즉시 새 <span style="color:orange">**Activity**</span> 인스턴스를 만든 다음
  새 구성에서 새 인스턴스를 호출
  
### 전체 수명

- <span style="color:blue">**onCreate()**</span>에 대한 첫 번째 호출에서
  <span style="color:blue">**onDestroy()**</span>에 대한 단일 최종 호출 사이에 발생
- <span style="color:orange">**Activity**</span>는
  <span style="color:blue">**onCreate()**</span>에서 _global_ 상태의 모든 설정을 수행하고
  <span style="color:blue">**onDestroy()**</span>에서 나머지 모든 리소스를 해제
  
### 가시적 수명

- <span style="color:blue">**onStart()**</span>에 대한 호출에서
  <span style="color:blue">**onStop()**</span>에 대한 호출까지 발생
- 이 시간 동안 사용자는 화면에서
  <span style="color:orange">**Activity**</span>를 볼 수 있지만
  전경에 있지 않고 사용자와 상호작용할 수 있다
  
### 전경 수명

- <span style="color:blue">**onResume()**</span>에 대한 호출에서
  <span style="color:blue">**onPause()**</span>에 대한 호출까지 발생
- 이 시간 동안 <span style="color:orange">**Activity**</span>는
  가시적이고 활동적이며 사용자와 상호작용 한다
- <span style="color:orange">**Activity**</span>은 _Resumed_ 상태와
  _Paused_ 상태를 자주 갈 수 있다

### [참고]
<https://developer.android.com/guide/components/activities/intro-activities> <br>
<https://developer.android.com/guide/components/activities/activity-lifecycle> <br>
<https://developer.android.com/reference/android/app/Activity>
