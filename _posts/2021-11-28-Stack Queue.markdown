---
layout: post
title:  "Stack Queue"
date:   2021-11-28 15:00:00 +0900
category: DataStructure
---

# Stack Queue

## Stack

<img src="http://snowchori.github.io/assets/img/Stack.png">

- stack이란 쌓아 올린다는 것을 의미
- 차곡차곡 쌓아 올린 형태의 자료구조

### Stack 특징

- 같은 구조와 크기의 자료를 정해진 방향으로만 쌓을 수 있고 top으로 정한 곳을 통해서만 접근할 수 있다
- top에는 가장 위에 있는 자료는 가장 최근에 들어온 자료를 가리키고 있으며 삽입되는 새 자료는 top이
  가리키는 자료의 위에 쌓이게 된다
- 스택에서 자료를 삭제할 때도 top을 통해서만 가능하다
- 스택에서 top을 통해 삽입하는 연산은 push, top을 통해 삭제하는 연산을 pop이라고 한다
- 스택은 시간 순서에 따라 자료가 쌓여서 가장 마지막에 삽입된 자료가 가장 먼저 삭제된다는 구조적 특징을 가지게 된다
- 이러한 스택의 구조를 후입선출(LIFO) 구조라고 한다

## Queue

<img src="http://snowchori.github.io/assets/img/Queue.png">

- 줄지어 순서대로 처리 되는것이 큐 자료구조이다
- 선입선출(FIFO) 방식의 자료구조

### Queue 특징

- 한쪽 끝에서 삽입 작업이 다른 쪽 끝에서 삭제 작업이 양쪽으로 이루어진다
- 삭제연산만 수행되는 곳을 front 삽입연산만 이루어지는 곳을 rear로 정하여
  각각의 연산작업만 수행된다
- 큐의 rear에서 이루어지는 삽인연산을 enQueue, front에서 이루어지는 삭제연산을 dnqueue라고 부른다
- 큐의 가장 첫 원소를 front 가장 끝 원소를 rear
- 큐는 들어올 때 rear로 들어오지만 나올때는 front부터 빠지는 특성
- 접근 방법은 가장 첫 원소와 끝 원소로만 가능
- 가장 먼저 들어온 front 원소가 가장 먼저 삭제

### 선형 큐

- 선형 큐에서 삽입 및 삭제를 반복하다 보면 rear가 맨 마지막 인덱스(n-1)를 가리켜 앞에는
  비어 있을 수 있지만 더이상 노드를 삽입할 수 없어 이를 꽉 찼다고 인식
- 이러한 문제를 해결하기 위해 원형 큐 사용

### 원형 큐

- enQueue 연산 시 rear+1하여 데이터를 새로 넣는다
- rear+1이 front와 같으면 꽉 차 있다고 판단해 front가 가리키는 곳은 데이터가 없다고 가정한다
- 배열의 마지막 인덱스에서 다음 인덱스로 넘어갈 때 ((index+1)%배열의 사이즈)를 이용하여
  OutOfBoundsException이 일어나지 않고 인덱스 0으로 순환되는 구조를 가진다
  
### 우선순위 큐

- 우선순위가 높은 데이터가 먼저 구현된다
- 일반적인 큐의 형태는 선형이지만 우선순위 큐는 트리 구조로 보는것이 합리적이며 일반적으로 최대 힙을 이용해
  구현한다
- 우선순위 큐는 우선순위를 가진 데이터를 저장하는 큐를 의미한다
- 데이터를 꺼낼 때 우선순위가 높은 데이터가 가장 먼저 나온다는 특징이 있어 많이 활용되고 있다
- 우선순위 큐는 운영체제의 작업 스케쥴링, 정렬, 네트워크 관리 등의 다양한 기술에 적용되고 있다

### [참고]
<https://devuna.tistory.com/22> <br>
<https://m.blog.naver.com/dptmf4676/222011391965>