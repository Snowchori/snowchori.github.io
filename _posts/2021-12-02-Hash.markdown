---
layout: post
title:  "Hash"
date:   2021-12-02 21:00:00 +0900
category: DataStructure
---

# Hash

## Hash Table

- 해시 테이블은 키(key)와 값(value)이 하나의 쌍을 이루는 데이터 구조
- 빠르게 데이터를 검색할 수 있는 자료구조
- 해시 테이블은 각각의 key값에 해시함수를 적용해 배열의 고유한 index를 생성하고
  이 index를 활용해 값을 저장하거나 검색하게 된다
  
## Hash Table 구조

<img src="http://snowchori.github.io/assets/img/hash_table.png">

- 해시 테이블은 키(key), 해시함수(hash function), 해시(hash), 값(value),
  저장소(bucket, slot)로 이루어져 있다
- 키는 해시함수를 통해 해시로 변경이 되며 해시는 값과 매칭되어 저장소에 저장이 된다
- 키(key) : 고유한 값이며 해시함수의 input이 된다
- 해시함수(hash function) : 키를 해시로 바꿔주는 역할을 한다
- 해시(hash) : 해시함수의 결과물이며 저장소에서 값과 매치오디어 저장된다
- 값(value) : 저장소에 최종적으로 저장되는 값으로 키와 매칭되어 저장, 삭제, 검색, 접근이 가능해야 한ㄷ

## Hash Function

- 해시함수에서 중요한 것은 고유한 인덱스 값을 설정하는 것
- 대표적인 해시 함수
  * Division Method : 나눗셈을 이용하는 방법으로 입력값을 테이블의 크기로 나누어 계산
  * Digit Folding : 각 Key의 문자열을 ASCII 코드로 바꾸고 값을 합한 데이터를 테이블 내의 주소로 사용하는 방법
  * Multiplication Method : 숫자로 된 Key값 K와 0과 1사이의 실수 A, 보통 2의 제곱수인 m을
    사용하여 다음과 같은 계산을 해준다 h(k) = (kAmod1)*m
  * Univeral Hashing : 다수의 해시함수를 만들어 집합 H에 넣어두고 무작위로 해시함수를 선택해
    해시값을 만드는 기법
    
## Hash 값이 충돌하는 경우

### 분리 연결법(Separate Chaining)

- 동일한 버킷의 데이터에 대해 자료구조를 활용해 추가 메모리를 사용하여 다음 데이터의 주소를 저장하는 것\
- 동일한 버킷으로 접근을 한다면 데이터들을 연결해서 관리해준다
- 장점
  * 해시 테이블 확장이 필요없다
  * 간단하게 구현이 가능하다
  * 손쉽게 삭제할 수 있다
- 단점
  * 데이터의 수가 많아지면 동일한 버킷에 chaining되는 데이터가 많아진다
  * 그에 따라 캐시의 효율성이 감소한다
  
### 개방 주소법(Open Addressing)

- 해시 테이블의 공간을 활용하는 방법
- 개방 주소법을 구현하기 위한 대표적인 방법
  * Linear Probing : 현재의 버킷 index로부터 고정폭만큼씩 이동하여 차례대로 검색해
    비어있는 버킷에 데이터를 저장
  * Quadratic Probing : 해시의 저장순서 폭을 제곱으로 저장하는 방식
  * Double Hashing Probing : 해시된 값을 한번 더 해싱하여 해시의 규칙성을 없애버리는 방식
  
### [참고]
<https://velog.io/@cyranocoding/Hash-Hashing-Hash-Table%ED%95%B4%EC%8B%9C-%ED%95%B4%EC%8B%B1-%ED%95%B4%EC%8B%9C%ED%85%8C%EC%9D%B4%EB%B8%94-%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0%EC%9D%98-%EC%9D%B4%ED%95%B4-6ijyonph6o> <br>
<https://hee96-story.tistory.com/48> <br>
<https://mangkyu.tistory.com/102>