---
layout: post
title:  "Test-Driven-Development"
date:   2021-11-17 20:00:00 +0900
category: CS
---
# TDD

## TDD란?

- 반복 테스트를 이용한 소프트웨어 방법론
- 작은 단위의 테스트 케이스를 작성하고 이를 통과하는 코드를 추가하는 단계를
  반복하여 구현
- 짧은 개발 주기의 반복에 의존하는 개발 프로세스
- XP의 Test-First 개념에 기반을 둔 단순한 설계를 중요시

## TDD 개발주기

<img src="http://snowchori.github.io/assets/img/TDD.png">

- <<span style="color:red">Red</span>>단계에서는 실패하는 테스트 코드를 먼저 작성
- <<span style="color:green">Green</span>>단계에서는 테스트 코드를 성공시키기 위한 실제 코드를 작성
- <<span style="color:yellow">Yellow</span>>단계에서는 중복 코드 제거, 일반화 등의 리팩토링 수행
- 실패하는 테스트 코드를 작성할 때까지 실제 코드를 작성하지 않아야 한다
- 실패하는 테스트를 통과할 정도의 최소 실제 코드를 작성해야 한다
- 이를 통해, 실제 코드에 대해 기대되는 바를 보다 명확하게 정의함으로써 불필요한 설계를
  피할 수 있고, 정확한 요구 사항에 집중할 수 있다
  
## TDD 개발 방식

<img src="http://snowchori.github.io/assets/img/TDD_method.png">

- 테스트 코드를 작성한 뒤에 실제 코드를 작성
- 설계단계에서 프로그래밍 목적을 반드시 미리 정의해야하고, 무엇을 테스트해야할지
  미리 정의해야 한다
- 테스트 코드를 작성하는 도중에 발생하는 예외 사항들은 테스트 케이스에 추가하고 설계를 개선
- 테스트 통과된 코드만을 코드 개발 단계에서 실제 코드로 작성

## TDD의 장점

- 객체 지향적인 코드 개발
  * TDD는 코드의 재사용 보장을 명시하므로 TDD를 통한 소프트웨어 개발 시 기능별로 모듈화가 이루어진다
  * 의존성과 종속성이 낮은 모듈로 조합된 소프트웨어 개발을 가능하게 하며, 필요에 따라 모듈을
  추가하거나 제거해도 소프트웨어 전체 구조에 영향을 미치지 않게 된다
- 설계 수정시간의 단축
  * 테스트코드를 먼저 작성하기 때문에 최초 설계안을 만족하게 하며 입출력 구조와 기능의 정의를
  명확하게 하게 되므로 설계의 구조적 문제를 바로 찾아낼 수 있다
- 유지보수의 용이성
  * 기본적으로 단위 테스트 기반의 테스트 코드를 작성하기 때문에 추후 문제가 발생하였을 때 각각의
  모듈별로 테스트를 진행해보면 문제의 지점을 쉽게 찾을 수 있다
- 테스트 문서의 대체 가능
  * TDD를 하게 될 때 테스팅을 자동화시킴과 동시에 더욱 정확한 테스트 근거를 산출해
  정의서를 작성할 수 있다
    
## TDD의 단점

- 사전준비 기간
  * TDD를 프로젝트에 도입하려면 사전에 필요한 지식을 습득하고 개발 환경을 구축해야 한다
- 생산성 저하
  * 단발성 개발은 개발 기간이 타이트하게 잡히는 경우가 많은데 이럴 때 TDD를 이용해 테스트 코드를 작성하고
  그에 통과하기 위한 코드를 작성한다면 비효율적일 것이다
    
## TDD Tools

- JUnit
  * 전 세계적으로 널리 사용되는 JAVA의 표준 단위 테스트 프레임워크
  
### [참고]
<https://wooaoe.tistory.com/33>
<http://www.incodom.kr/%ED%85%8C%EC%8A%A4%ED%8A%B8_%EC%A3%BC%EB%8F%84_%EA%B0%9C%EB%B0%9C>